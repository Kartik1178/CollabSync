// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  memberships   ProjectMember[]
  invitations   ProjectInvitation[]
  tasks         Task[]
  discussions   Discussion[]
  comments      Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  visibility  String   @default("public") // public, private, team
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  invitations ProjectInvitation[]
  tags        ProjectTag[]
  tasks       Task[]
  discussions Discussion[]
  repositories Repository[]
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String   @default("member") // owner, admin, member
  joinedAt  DateTime @default(now())

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model ProjectInvitation {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  status    String   @default("pending") // pending, accepted, declined
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model ProjectTag {
  id        String   @id @default(cuid())
  projectId String
  name      String
  
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  status      String   @default("pending") // pending, in-progress, completed
  projectId   String
  assigneeId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?    @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
}

model Discussion {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  projectId   String
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
}

model Comment {
  id           String   @id @default(cuid())
  content      String   @db.Text
  discussionId String
  authorId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Repository {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  url         String
  projectId   String
  language    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

